Build a family chore management web app called Chory. All users should be able to see all tasks, not just their own — each task should clearly show who is assigned. Admin features must be PIN-protected and require re-entering the adult’s PIN to access. Secondary tasks should only earn points after all primary tasks are completed by that person. Streaks should track per person, and only increase if all their assigned primary tasks are completed for the day. Include a background task to pre-generate recurring tasks 28 days in advance and mark overdue ones with a black mark.

The app should allow a household to log in using a shared email and password. After logging in, each person selects their profile (nickname + 4-digit PIN). Adults are “Admins” — they can edit tasks, people, and rewards. Kids are “Members” — they can only view their tasks, mark them complete, and see the leaderboard.

Tasks can be one-off or recurring (daily, weekly, every X days, monthly, yearly). Each task has a title, description, estimated duration (in minutes), and can be assigned a primary person and optional secondary people. Missed tasks after the due date receive a black mark and reset the streak.

The app should include:• A “Today” view showing each person’s tasks with a tap-to-complete interaction• A “This Week” view showing all household tasks grouped by day and person (with assignee visible)• Animated feedback (e.g. confetti) and streak indicators when tasks are completed• A simplified, mobile-friendly UI using React and Tailwind CSS

Gamification features:• Completing a primary task earns full points• Completing a secondary task (only after completing your own) earns bonus points• Daily streaks give additional points• Missed tasks create black marks and reset the streak

A leaderboard compares each person’s completed task percentage and total points. Adults can access a protected Admin Panel to:• Add or edit people (with PINs)• Create/edit tasks and set recurrence schedules• Define reward items and mark them as claimed

The app should use SQLite or a simple JSON-based backend for storage, and include scheduled background jobs (e.g. daily task generator and black mark checker). The design should be light-hearted, family-friendly, and accessible.